namespace Satsuma
{
/*!
\mainpage Satsuma

Satsuma is a graph library for .NET, written in C#. The goal was to create an easy-to-use and flexible library, which implements all the necessary graph structures, and the fastest possible versions of common graph algorithms.

Satsuma is released under the \ref p_license "zlib license". This license is very permissive and allows you to use Satsuma for both personal and commercial purposes.

- <a href='https://sourceforge.net/projects/satsumagraph/files'>Downloads</a>
- <a href='https://sourceforge.net/p/satsumagraph/tickets'>Issue tracker</a>
- <a href='https://sourceforge.net/p/satsumagraph/code/ci/master/tree/'>Browse code</a>

- \ref p_installation
- \ref p_tutorial
- \ref p_troubleshooting
- \ref p_performance
- \ref p_thread_safety
- \ref p_tsp
- \ref p_license

\page p_installation Installation

There are two ways for using Satsuma:

- <b>Dynamic linking</b>: This is maybe the easier way. Satsuma comes with precompiled binary assemblies (\c .dll files) under the \c bin folder. You need to add a reference to \c bin\\Release\\Satsuma.dll in your project in order to use Satsuma classes.
- <b>Static linking</b>: Another way (not recommended) is to link Satsuma statically into your project by adding all the \c .cs source files to your project. This way, Satsuma will be compiled into your program.

\page p_tutorial Tutorial

\section p_tutorial_intro Introduction

- Graphs consist of \b nodes connected with \b arcs.
- All graphs are \b mixed in Satsuma, which means that a graph can contain \b directed and \b undirected arcs at once. In short, there is no distinction between directed and undirected graphs. Loops and multiple arcs are also allowed.
- An undirected arc is called an \b edge.

Graphs can be accessed in a read-only way through the IGraph interface. The IBuildableGraph and IDestroyableGraph interfaces provide write access to a graph.

The structs Node and Arc represent the nodes and arcs of a graph. Node.Invalid and Arc.Invalid are null-like constants, denoting "no node" and "no arc", respectively.

\warning Though all graphs use the same type for representing Node and Arc objects, they are generally not interchangeable between graphs. Each graph has its own Node and Arc set. If you pass a Node obtained from a graph to a method of another graph, you will likely get an error. (\ref p_tutorial_adaptors "Adaptors" are an exception from this general rule.)

Most of the algorithms can be divided into two categories:

- while there are operations which view the graph as \b undirected and treat all arcs as edges,
	- e.g. ConnectedComponents, Bipartition
- others view the graph as a \b directed graph and treat edges as bidirectional channels.
	- e.g. TopologicalOrder, Dijkstra, Preflow

\section p_tutorial_create Creating graphs

A graph can have at most \c int.MaxValue nodes and \c int.MaxValue arcs.

To create your first graph, enter the following code:

\code{.cs}
CustomGraph g = new CustomGraph();
Node a = g.AddNode();
Node b = g.AddNode();
Node c = g.AddNode();
Arc ab = g.AddArc(a, b, Directedness.Directed);
Arc bc = g.AddArc(b, c, Directedness.Undirected);
\endcode

The above code creates a graph on three nodes, consisting of a directed arc and an edge. As you can see, the CustomGraph class can be used to build a graph.

You can also use some "graph constants". These are predefined graphs which usually consume very little memory, due to their special nature. They include CompleteBipartiteGraph and CompleteGraph. Using them is more efficient than e.g. building a complete graph using CustomGraph.

Graphs can also be loaded and saved. See the IO.SimpleGraphFormat, IO.LemonGraphFormat and IO.GraphML.GraphMLFormat classes.

\section p_tutorial_process Processing graphs

- To enumerate the elements of a graph, you can call \ref IGraph.Nodes "Nodes" or \ref IGraph.Arcs "Arcs".
- You can get the two nodes of an Arc by calling the \ref IArcLookup.U "U" and \ref IArcLookup.V "V" methods of the containing graph.
- \ref IArcLookup.IsEdge "IsEdge" tells you whether an arc is undirected.
- Use the \ref ArcLookupExtensions.ArcToString "ArcToString" method to convert an arc to a readable representation.

Example:

\code{.cs}
var g = new CompleteGraph(100); // create a complete graph on 100 nodes
var cost = new Dictionary<Node, double>(); // create a cost function on the nodes
int i = 0;
foreach (Node node in g.Nodes()) cost[node] = i++; // assign some integral costs to the nodes
Func<Arc, double> arcCost = 
	(arc => cost[g.U(arc)] + cost[g.V(arc)]); // a cost of an arc will be the sum of the costs of the two nodes
foreach (Arc arc in g.Arcs())
	Console.WriteLine("Cost of "+g.ArcToString(arc)+" is "+arcCost(arc));
\endcode

\section p_tutorial_adaptors Using adaptors

By using adaptors, you can perform slight modifications on graphs without actually altering the graph object. Adaptors are analogous to camera filters as they allow you to see an underlying object in a different way.

Two basic adaptor examples are Subgraph and Supergraph.

- Subgraph allows you to temporarily disable nodes and arcs in a graph, and work with a smaller portion of it.
- Supergraph allows you to temporarily add new nodes and arcs to an existing graph.
	- With Supergraph, you can e.g. extend a read-only graph like CompleteGraph with new nodes and arcs, even though the graph itself cannot be modified directly.

Example for Subgraph:

\code{.cs}
var g = new CompleteGraph(10); // create a complete graph on 10 nodes
var sg = new Subgraph(g); // create a subgraph of the complete graph
sg.Enable(g.GetNode(0), false); // disable a single node
Console.WriteLine("The subgraph contains "+sg.NodeCount()+" nodes and "+sg.ArcCount()+" arcs.");
\endcode

Example for Supergraph:

\code{.cs}
var g = new CompleteGraph(20); // create a complete graph on 20 nodes
var sg = new Supergraph(g); // create a supergraph of the complete graph
var s = sg.AddNode(); // add a node
sg.AddArc(s, g.GetNode(3), Directedness.Directed); // add a directed arc
Console.WriteLine("The extended graph contains "+sg.NodeCount()+" nodes and "+sg.ArcCount()+" arcs.");
\endcode

Generally speaking, Node and Arc objects are \b interchangeable between the underlying graph and the adaptor, as long as it "makes sense". For clarification, you should always read the description of the adaptor class you want to use. For example:

- nodes of the Subgraph are valid as nodes of the underlying graph as well,
- and nodes of the underlying graph are valid as nodes of the Supergraph as well.

Thus, the code below is correct and will not produce an error:

\code{.cs}
CustomGraph g;
Subgraph sg = new Subgraph(g);
[...]
foreach (var arc in sg.Arcs()) // we are enumerating the arcs of the *subgraph*!
{
	// we are now querying arc properties using the *original graph*!
	Console.WriteLine("This arc goes from "+g.U(arc)+" to "+g.V(arc)+
		", and is "+(g.IsEdge(arc) ? "" : "not ")+"an edge.");
	Console.WriteLine("As text: "+g.ArcToString(arc));
}
\endcode

Other adaptor types:

- Path stores a path of the underlying graph
- ContractedGraph allows merging multiple nodes into one node
- RedirectedGraph allows changing the direction of some arcs
- ReverseGraph allows reversing all arcs of the graph
- UndirectedGraph allows viewing all arcs as edges

\warning Modifying the underlying graph while using an adaptor is often illegal, depending on the adaptor type. You should always read the description of the adaptor carefully.

\section p_tutorial_algorithm Algorithms

The following algorithms are available:

- BiEdgeConnectedComponents, BiNodeConnectedComponents, Bipartition, ConnectedComponents, StrongComponents, TopologicalOrder
- FindPathExtensions: finding a path in a graph
- The abstract class Dfs can be extended to create additional depth-first-search-based algorithms.
- Bfs, Dijkstra, BellmanFord: finding shortest (minimum length) or cheapest (minimum cost) paths
- Kruskal<TCost>, Prim<TCost>: finding minimum cost spanning forests
- MaximumMatching, MinimumCostMatching: finding matchings
- Preflow, IntegerPreflow: finding a maximum flow
- NetworkSimplex: finding a minimum cost feasible circulation
- Multiple heuristics for the \ref p_tsp "traveling salesman problem"
- Drawing.ForceDirectedLayout: computing an aesthetically pleasing visual representation of a graph

\page p_troubleshooting Troubleshooting

\section p_troubleshooting_keynotfound Why am I getting 'Key not found in Dictionary' errors?

You probably passed a Node or an Arc to the wrong graph. These objects are not interchangeable between separate graph objects (the exception being \ref p_tutorial_adaptors "adaptors").

\page p_performance Performance tips

- Ensure that optimization is turned on when building Satsuma.
  - As graph algorithms are computationally intensive, Satsuma is very sensitive to optimization.
- Run your program from outside the IDE, by launching the .exe file directly.
  - JIT optimization is disabled by default when running from within the IDE.
- Target 64-bit instead of 32-bit.
  - Set your project platform as either <b>Any CPU</b> (recommended) or <b>x64</b> (not recommended). Uncheck <b>Prefer 32-bit</b> if using <b>Any CPU</b>.
	- This does not apply for projects which need to call 32-bit unmanaged DLL's!

\page p_thread_safety Thread safety

A type is called <em>thread safe</em> if its instances can be simultaneously operated on by multiple threads without compromising integrity. For example, a class is thread safe if its methods and properties behave correctly even if multiple threads call/access them at once.

The following rules apply for types defined in Satsuma, concerning thread safety:

- If not stated otherwise, all \b classes and \b interfaces should be treated as thread \b unsafe.
	- Do not assume that they are safe by just looking at their source code. If their description does not say anything about thread safety, then their implementation may introduce thread unsafe solutions anytime in the future, which may break your code.
- Nevertheless, all \b structs in Satsuma are thread \b safe.
	- All structs defined in the Satsuma library are \b immutable.

The thread safety of an \b interface is in fact a restriction on implementor classes. In a sense, thread safety is part of the interface definition. For example, if \c ISomething is thread safe, then this means that all implementors should be written in a way that \c ISomething instances can be used by multiple threads at once.

\warning If an interface or base class is thread safe, this does not imply that all \b implementor or \b descendant classes are thread safe. However, if an instance of the derived type is treated as an instance of the base type, then it should be thread safe. This statement may sound confusing, so let us take a fictional example.
	- Supposed that \c IReadOnlySomething is a thread safe interface.
	- \c WritableSomething, which implements \c IReadOnlySomething, may not be thread safe, as the data structure may be compromised if it is modified concurrently.
	- However, if only the \c IReadOnlySomething methods are called, then a \c WritableSomething instance should be freely usable by any number of threads.

\page p_tsp The traveling salesman problem

Suppose that we have a bidirectional complete directed graph (that is, for each pair of nodes <em>a, b</em> there is a directed arc from \e a to \e b) and a cost function on the arcs. We would like to find a minimum cost <a href='http://en.wikipedia.org/wiki/Hamiltonian_cycle'>Hamiltonian cycle</a> in the graph. This is called the <a href='http://en.wikipedia.org/wiki/Travelling_salesman_problem'>traveling salesman problem</a>.

The TSP-related classes in Satsuma are: CheapestLinkTsp<TNode>, InsertionTsp<TNode>, Opt2Tsp<TNode>, HamiltonianCycle. They do not generally use the basic Satsuma types Node, Arc and IGraph, as the input graph in a TSP is always a bidirectional complete directed graph. Instead, there is a generic type parameter which is the type of the nodes to visit. TSP-solving classes like InsertionTsp<TNode> accept a collection of nodes and a cost function defined on node pairs, and produce a cost-effective visiting order of the supplied nodes.

TSP cost functions must always be finite. The algorithms generally perform well if the cost function is symmetric (that is, the cost of traveling from \e a to \e b is the same as traveling from \e b to \e a). In particular, they perform the best for metric cost functions (that is, the <a href="http://en.wikipedia.org/wiki/Triangle_inequality">triangle inequality</a> must hold as well).

\warning As the traveling salesman problem is NP-hard, there is no known optimal polynomial solution, and it is unlikely that one exists. Therefore, all classes employ some kind of heuristic and the returned tours will be probably suboptimal.

The following example demonstrates how a reasonably cheap tour on Euclidean points can be found using a Satsuma TSP solver:

\code{.cs}
// create a node collection: in this example, they are geographical locations
var points = new PointD[]
{
	new PointD(47.50704, 19.04592),
	new PointD(47.50284, 19.03171),
	new PointD(47.472331, 19.062706),
	new PointD(47.515373, 19.082839)
};

// define a cost function: in this example, it is the Euclidean distance
Func<PointD, PointD, double> cost =	(p, q) => p.Distance(q);

// create a TSP solver instance and calculate a tour
InsertionTsp<PointD> tsp = new InsertionTsp<PointD>(points, cost);
tsp.Run();
Console.WriteLine("Total tour cost: "+tsp.TourCost);
Console.WriteLine("Visiting order:");
foreach (PointD p in tsp.Tour()) Console.WriteLine(p);
\endcode

\page p_license License

Satsuma is released under the \c zlib license:

\verbinclude license.txt

*/
}
